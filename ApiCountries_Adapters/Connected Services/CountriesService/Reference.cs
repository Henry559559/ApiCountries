//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CountriesService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Country", Namespace="http://schemas.datacontract.org/2004/07/MS_Countries_Adapters")]
    public partial class Country : object
    {
        
        private bool ActiveField;
        
        private System.DateTime DateModifiedField;
        
        private short IdCountryField;
        
        private string NameCountryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this.ActiveField;
            }
            set
            {
                this.ActiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateModified
        {
            get
            {
                return this.DateModifiedField;
            }
            set
            {
                this.DateModifiedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdCountry
        {
            get
            {
                return this.IdCountryField;
            }
            set
            {
                this.IdCountryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameCountry
        {
            get
            {
                return this.NameCountryField;
            }
            set
            {
                this.NameCountryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Department", Namespace="http://schemas.datacontract.org/2004/07/MS_Countries_Adapters")]
    public partial class Department : object
    {
        
        private bool ActiveField;
        
        private System.DateTime DateModifiedField;
        
        private short IdDepartmentField;
        
        private string NameDepartmentField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this.ActiveField;
            }
            set
            {
                this.ActiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateModified
        {
            get
            {
                return this.DateModifiedField;
            }
            set
            {
                this.DateModifiedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdDepartment
        {
            get
            {
                return this.IdDepartmentField;
            }
            set
            {
                this.IdDepartmentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameDepartment
        {
            get
            {
                return this.NameDepartmentField;
            }
            set
            {
                this.NameDepartmentField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/MS_Countries_Adapters")]
    public partial class City : object
    {
        
        private bool ActiveField;
        
        private System.DateTime DateModifiedField;
        
        private short IdCityField;
        
        private string NameCityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this.ActiveField;
            }
            set
            {
                this.ActiveField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateModified
        {
            get
            {
                return this.DateModifiedField;
            }
            set
            {
                this.DateModifiedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdCity
        {
            get
            {
                return this.IdCityField;
            }
            set
            {
                this.IdCityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameCity
        {
            get
            {
                return this.NameCityField;
            }
            set
            {
                this.NameCityField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CountriesService.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateCountries", ReplyAction="http://tempuri.org/IService/CreateCountriesResponse")]
        System.Threading.Tasks.Task<CountriesService.Country> CreateCountriesAsync(CountriesService.Country request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReadCountries", ReplyAction="http://tempuri.org/IService/ReadCountriesResponse")]
        System.Threading.Tasks.Task<CountriesService.Country[]> ReadCountriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCountries", ReplyAction="http://tempuri.org/IService/UpdateCountriesResponse")]
        System.Threading.Tasks.Task<CountriesService.Country> UpdateCountriesAsync(CountriesService.Country request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCountry", ReplyAction="http://tempuri.org/IService/DeleteCountryResponse")]
        System.Threading.Tasks.Task<CountriesService.Country> DeleteCountryAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReadCountry", ReplyAction="http://tempuri.org/IService/ReadCountryResponse")]
        System.Threading.Tasks.Task<CountriesService.Country> ReadCountryAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateDepartments", ReplyAction="http://tempuri.org/IService/CreateDepartmentsResponse")]
        System.Threading.Tasks.Task<CountriesService.Department> CreateDepartmentsAsync(CountriesService.Department request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReadDepartments", ReplyAction="http://tempuri.org/IService/ReadDepartmentsResponse")]
        System.Threading.Tasks.Task<CountriesService.Department[]> ReadDepartmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateDepartments", ReplyAction="http://tempuri.org/IService/UpdateDepartmentsResponse")]
        System.Threading.Tasks.Task<CountriesService.Department> UpdateDepartmentsAsync(CountriesService.Department request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteDepartment", ReplyAction="http://tempuri.org/IService/DeleteDepartmentResponse")]
        System.Threading.Tasks.Task<CountriesService.Department> DeleteDepartmentAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReadDepartment", ReplyAction="http://tempuri.org/IService/ReadDepartmentResponse")]
        System.Threading.Tasks.Task<CountriesService.Department> ReadDepartmentAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateCities", ReplyAction="http://tempuri.org/IService/CreateCitiesResponse")]
        System.Threading.Tasks.Task<CountriesService.City> CreateCitiesAsync(CountriesService.City request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReadCities", ReplyAction="http://tempuri.org/IService/ReadCitiesResponse")]
        System.Threading.Tasks.Task<CountriesService.City[]> ReadCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCities", ReplyAction="http://tempuri.org/IService/UpdateCitiesResponse")]
        System.Threading.Tasks.Task<CountriesService.City> UpdateCitiesAsync(CountriesService.City request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCity", ReplyAction="http://tempuri.org/IService/DeleteCityResponse")]
        System.Threading.Tasks.Task<CountriesService.City> DeleteCityAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReadCity", ReplyAction="http://tempuri.org/IService/ReadCityResponse")]
        System.Threading.Tasks.Task<CountriesService.City> ReadCityAsync(short id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IServiceChannel : CountriesService.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<CountriesService.IService>, CountriesService.IService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<CountriesService.Country> CreateCountriesAsync(CountriesService.Country request)
        {
            return base.Channel.CreateCountriesAsync(request);
        }
        
        public System.Threading.Tasks.Task<CountriesService.Country[]> ReadCountriesAsync()
        {
            return base.Channel.ReadCountriesAsync();
        }
        
        public System.Threading.Tasks.Task<CountriesService.Country> UpdateCountriesAsync(CountriesService.Country request)
        {
            return base.Channel.UpdateCountriesAsync(request);
        }
        
        public System.Threading.Tasks.Task<CountriesService.Country> DeleteCountryAsync(short id)
        {
            return base.Channel.DeleteCountryAsync(id);
        }
        
        public System.Threading.Tasks.Task<CountriesService.Country> ReadCountryAsync(short id)
        {
            return base.Channel.ReadCountryAsync(id);
        }
        
        public System.Threading.Tasks.Task<CountriesService.Department> CreateDepartmentsAsync(CountriesService.Department request)
        {
            return base.Channel.CreateDepartmentsAsync(request);
        }
        
        public System.Threading.Tasks.Task<CountriesService.Department[]> ReadDepartmentsAsync()
        {
            return base.Channel.ReadDepartmentsAsync();
        }
        
        public System.Threading.Tasks.Task<CountriesService.Department> UpdateDepartmentsAsync(CountriesService.Department request)
        {
            return base.Channel.UpdateDepartmentsAsync(request);
        }
        
        public System.Threading.Tasks.Task<CountriesService.Department> DeleteDepartmentAsync(short id)
        {
            return base.Channel.DeleteDepartmentAsync(id);
        }
        
        public System.Threading.Tasks.Task<CountriesService.Department> ReadDepartmentAsync(short id)
        {
            return base.Channel.ReadDepartmentAsync(id);
        }
        
        public System.Threading.Tasks.Task<CountriesService.City> CreateCitiesAsync(CountriesService.City request)
        {
            return base.Channel.CreateCitiesAsync(request);
        }
        
        public System.Threading.Tasks.Task<CountriesService.City[]> ReadCitiesAsync()
        {
            return base.Channel.ReadCitiesAsync();
        }
        
        public System.Threading.Tasks.Task<CountriesService.City> UpdateCitiesAsync(CountriesService.City request)
        {
            return base.Channel.UpdateCitiesAsync(request);
        }
        
        public System.Threading.Tasks.Task<CountriesService.City> DeleteCityAsync(short id)
        {
            return base.Channel.DeleteCityAsync(id);
        }
        
        public System.Threading.Tasks.Task<CountriesService.City> ReadCityAsync(short id)
        {
            return base.Channel.ReadCityAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:62968/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService,
        }
    }
}
